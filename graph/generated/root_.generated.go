// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"bytes"
	"context"
	"errors"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/paper-social/notification-service/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		PublishPost func(childComplexity int, input model.PublishPostInput) int
	}

	Notification struct {
		Content func(childComplexity int) int
		ID      func(childComplexity int) int
		PostID  func(childComplexity int) int
		Read    func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	NotificationMetrics struct {
		AverageDeliveryTime    func(childComplexity int) int
		FailedAttempts         func(childComplexity int) int
		TotalNotificationsSent func(childComplexity int) int
	}

	Post struct {
		Content func(childComplexity int) int
		ID      func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	PostResponse struct {
		Message             func(childComplexity int) int
		NotificationsQueued func(childComplexity int) int
		Success             func(childComplexity int) int
	}

	Query struct {
		GetNotificationMetrics func(childComplexity int) int
		GetNotifications       func(childComplexity int, userID string) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.publishPost":
		if e.complexity.Mutation.PublishPost == nil {
			break
		}

		args, err := ec.field_Mutation_publishPost_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PublishPost(childComplexity, args["input"].(model.PublishPostInput)), true

	case "Notification.content":
		if e.complexity.Notification.Content == nil {
			break
		}

		return e.complexity.Notification.Content(childComplexity), true

	case "Notification.id":
		if e.complexity.Notification.ID == nil {
			break
		}

		return e.complexity.Notification.ID(childComplexity), true

	case "Notification.postID":
		if e.complexity.Notification.PostID == nil {
			break
		}

		return e.complexity.Notification.PostID(childComplexity), true

	case "Notification.read":
		if e.complexity.Notification.Read == nil {
			break
		}

		return e.complexity.Notification.Read(childComplexity), true

	case "Notification.userID":
		if e.complexity.Notification.UserID == nil {
			break
		}

		return e.complexity.Notification.UserID(childComplexity), true

	case "NotificationMetrics.averageDeliveryTime":
		if e.complexity.NotificationMetrics.AverageDeliveryTime == nil {
			break
		}

		return e.complexity.NotificationMetrics.AverageDeliveryTime(childComplexity), true

	case "NotificationMetrics.failedAttempts":
		if e.complexity.NotificationMetrics.FailedAttempts == nil {
			break
		}

		return e.complexity.NotificationMetrics.FailedAttempts(childComplexity), true

	case "NotificationMetrics.totalNotificationsSent":
		if e.complexity.NotificationMetrics.TotalNotificationsSent == nil {
			break
		}

		return e.complexity.NotificationMetrics.TotalNotificationsSent(childComplexity), true

	case "Post.content":
		if e.complexity.Post.Content == nil {
			break
		}

		return e.complexity.Post.Content(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.userID":
		if e.complexity.Post.UserID == nil {
			break
		}

		return e.complexity.Post.UserID(childComplexity), true

	case "PostResponse.message":
		if e.complexity.PostResponse.Message == nil {
			break
		}

		return e.complexity.PostResponse.Message(childComplexity), true

	case "PostResponse.notificationsQueued":
		if e.complexity.PostResponse.NotificationsQueued == nil {
			break
		}

		return e.complexity.PostResponse.NotificationsQueued(childComplexity), true

	case "PostResponse.success":
		if e.complexity.PostResponse.Success == nil {
			break
		}

		return e.complexity.PostResponse.Success(childComplexity), true

	case "Query.getNotificationMetrics":
		if e.complexity.Query.GetNotificationMetrics == nil {
			break
		}

		return e.complexity.Query.GetNotificationMetrics(childComplexity), true

	case "Query.getNotifications":
		if e.complexity.Query.GetNotifications == nil {
			break
		}

		args, err := ec.field_Query_getNotifications_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetNotifications(childComplexity, args["userID"].(string)), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputPublishPostInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../gql/post.graphql", Input: `type Post {
  id: ID!
  userID: String!
  content: String!
}

type PostResponse {
  success: Boolean!
  message: String!
  notificationsQueued: Int!
}

type Mutation {
  publishPost(input: PublishPostInput!): PostResponse!
}

input PublishPostInput {
  userID: String!
  content: String!
} `, BuiltIn: false},
	{Name: "../gql/notification.graphql", Input: `scalar Int64

type Query {
  getNotifications(userID: String!): [Notification!]!
  getNotificationMetrics: NotificationMetrics!
}

type Notification {
  id: ID!
  userID: String!
  postID: String!
  content: String!
  read: Boolean!
} 

type NotificationMetrics {
  totalNotificationsSent: Int64!
  failedAttempts: Int64!
  averageDeliveryTime: Float!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
