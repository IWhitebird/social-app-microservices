package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"

	graph "github.com/iwhitebird/social-app-microservices/graph/generated"
	"github.com/iwhitebird/social-app-microservices/graph/model"
	"github.com/iwhitebird/social-app-microservices/proto/generated/post/proto"
)

// PublishPost is the resolver for the publishPost field.
func (r *mutationResolver) PublishPost(ctx context.Context, input model.PublishPostInput) (*model.PostResponse, error) {
	response, err := r.postClient.PublishPost(ctx, &proto.Post{
		UserId:  input.UserID,
		Content: input.Content,
	})
	if err != nil {
		return nil, err
	}
	return &model.PostResponse{
		Success:             response.Success,
		Message:             response.Message,
		NotificationsQueued: response.NotificationsQueued,
	}, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
