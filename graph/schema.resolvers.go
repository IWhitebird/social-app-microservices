package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.72

import (
	"context"
	"fmt"

	graph "github.com/paper-social/notification-service/graph/generated"
	"github.com/paper-social/notification-service/graph/model"
	notification "github.com/paper-social/notification-service/proto/generated/notification/proto"
)

// GetNotifications is the resolver for the getNotifications field.
func (r *queryResolver) GetNotifications(ctx context.Context, userID string) ([]*model.Notification, error) {
	fmt.Println("GetNotifications called")
	stream, err := r.notificationClient.GetNotifications(ctx, &notification.UserId{
		UserId: userID,
	})
	if err != nil {
		return nil, err
	}

	var notifications []*model.Notification
	for {
		notificationProto, err := stream.Recv()
		if err != nil {
			break
		}

		notifications = append(notifications, &model.Notification{
			ID:      notificationProto.Id,
			UserID:  notificationProto.UserId,
			PostID:  notificationProto.PostId,
			Content: notificationProto.Content,
			Read:    notificationProto.Read,
		})
	}

	return notifications, nil
}

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
